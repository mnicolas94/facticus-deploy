name: 'Deploy'
description: 'Sends a file to deploy'
inputs:
  deployPlatform:
    required: true
    description: 'Platform to deploy'
  buildPath:
    required: true
    description: 'File to deploy'
  version:
    required: true
    description: 'build version'
  deployParameters:
    required: false
    default: ''
    description: 'Platform specific parameters in json format'

runs:
  using: "composite"
  steps:
    # Telegram
    - name: Deploy to Telegram
      if: ${{ inputs.deployPlatform == 'Telegram'}}
      uses: mnicolas94/facticus-deploy/.github/actions/deploy/telegram@v0.6.4
      with:
        buildPath: ${{ inputs.buildPath }}
        message: ${{ fromJson(inputs.deployParameters).telegram_message }}
        TELEGRAM_SESSION: ${{ env.TELEGRAM_SESSION }}
        TELEGRAM_API_ID: ${{ env.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ env.TELEGRAM_API_HASH }}
        TELEGRAM_TOKEN: ${{ env.TELEGRAM_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ env.TELEGRAM_CHAT_ID }}
        
    # Itchio
    - name: Deploy to Itch.io
      if: ${{ inputs.deployPlatform == 'Itch'}}
      uses: yeslayla/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ env.ITCH_BUTLER_CREDENTIALS }}
        CHANNEL: ${{ fromJson(inputs.deployParameters).itch_channel }}
        ITCH_GAME: ${{ env.ITCH_GAME }}
        ITCH_USER: ${{ env.ITCH_USER }}
        PACKAGE: ${{ inputs.buildPath }}
        VERSION: ${{ inputs.version }}
        
    # Play Store
    - name: Deploy to Play Store
      if: ${{ inputs.deployPlatform == 'PlayStore'}}
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ env.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
        packageName: ${{ env.PLAY_STORE_PACKAGE_NAME }}
        releaseFiles: ${{ inputs.buildPath }}
#        releaseName: ${{ inputs.version }}
        track: ${{ fromJson(inputs.deployParameters).playstore_track }}
        status: ${{ fromJson(inputs.deployParameters).playstore_status }}
        inAppUpdatePriority: ${{ fromJson(inputs.deployParameters).playstore_inAppUpdatePriority }}
        userFraction: ${{ fromJson(inputs.deployParameters).playstore_userFraction }}
#        whatsNewDirectory: ${{ inputs. }}
#        mappingFile: ${{ inputs. }}
#        debugSymbols: ${{ inputs. }}

    # Github Release
    - name: Checkout
      if: ${{ inputs.deployPlatform == 'GithubRelease'}}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        lfs: true
    - name: Create tag if it doesn't exist
      if: ${{ inputs.deployPlatform == 'GithubRelease'}}
      id: tag
      shell: bash
      run: |
        if [ $(git describe --tags --exact-match HEAD) ]; then
          echo "Current commit already has tag."
          echo "tag=$(git describe --tags --exact-match HEAD)" >> $GITHUB_OUTPUT
        else
          if [ -n $(git tag -l v${{ inputs.version }}) ]; then
            git tag v${{ inputs.version }}
            git push origin v${{ inputs.version }}
          fi
          echo "tag=v${{ inputs.version }}" >> $GITHUB_OUTPUT
        fi
    - name: Deploy to a Github release
      if: ${{ inputs.deployPlatform == 'GithubRelease'}}
      uses: softprops/action-gh-release@v1
      with:
        name: v${{ inputs.version }}
        tag_name: ${{ steps.tag.outputs.tag }}
        files: ${{ inputs.buildPath }}
