name: 'Build'
description: 'Build Unity project'
inputs:
  targetPlatform:
    required: true
    description: 'Platform that the build should target.'
  developmentBuild:
    required: false
    default: 'false'
    description: 'Whether is a development build or not'
  versioningStrategy:
    required: false
    default: 'Semantic'
    description: 'The versioning scheme to use when building the project'
  freeDiskSpace:
    required: false
    default: 'false'
    description: 'Whether to free disk space before build'
  buildVariables:
    required: true
    description: 'Base64 encoded build variables'
  androidAppBundle:
    required: false
    default: 'false'
    description: 'Whether to build .aab instead of .apk'
  androidKeystoreBase64:
    required: false
    default: ''
    description: 'The base64 contents of the android keystore file'
  androidKeystoreName:
    required: false
    default: ''
    description: 'The android keystoreName'
  androidKeystorePass:
    required: false
    default: ''
    description: 'The android keystorePass'
  androidKeyaliasName:
    required: false
    default: ''
    description: 'The android keyaliasName'
  androidKeyaliasPass:
    required: false
    default: ''
    description: 'The android keyaliasPass'
outputs:
  buildPath:
    value: ${{ steps.output_path.outputs.path }}
    description: "The built file path"
  version:
    value: ${{ steps.build.outputs.buildVersion }}
    description: ''
  projectName:
    value: ${{ steps.project_name.outputs.projectName }}
    description: ''

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        lfs: true
    - name: Get project name variable
      id: project_name
      uses: mnicolas94/facticus-deploy/.github/actions/get-project-name@v0.1.84
    - name: Cache
      uses: actions/cache@v2
      with:
        path: Library
        key: Library-${{ steps.project_name.outputs.projectNameNoSpaces }}-${{ inputs.targetPlatform }}
        restore-keys: |
          Library-${{ steps.project_name.outputs.projectNameNoSpaces }}-
          Library-
    - name: Free CI system disk space
      if: ${{ inputs.freeDiskSpace == 'true' }}
      uses: mnicolas94/facticus-deploy/.github/actions/free-disk-space@v0.1.84
          
    - name: Build step
      uses: game-ci/unity-builder@v2
      id: build
      env:
        UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
        dev_build_parameter: ${{ fromJSON('["", "-developmentBuild"]')[inputs.developmentBuild == 'true'] }}
      with:
        buildName: ${{ steps.project_name.outputs.projectName }}
        buildMethod: UnityBuilderAction.BuildScript.Build
        targetPlatform: ${{ inputs.targetPlatform }}
        versioning: ${{ inputs.versioningStrategy }}
        androidAppBundle: ${{ inputs.androidAppBundle }}
        androidKeystoreName: ${{ inputs.androidKeystoreName }}
        androidKeystoreBase64: ${{ inputs.androidKeystoreBase64 }}
        androidKeystorePass: ${{ inputs.androidKeystorePass }}
        androidKeyaliasName: ${{ inputs.androidKeyaliasName }}
        androidKeyaliasPass: ${{ inputs.androidKeyaliasPass }}
        customParameters: ${{ env.dev_build_parameter }} -buildVariables ${{ inputs.buildVariables }}
    
    # --- Get build path ---    
    - name: Get platform display name
      id: display_name
      uses: mnicolas94/facticus-deploy/.github/actions/platform-display-name@v0.1.84
      with:
        platform: ${{ inputs.targetPlatform }}
    - name: Construct zip name (Standalone and WebGL)
      id: zipName
      shell: bash
      run: |
        echo "zipName=${{ steps.project_name.outputs.projectName }}-${{ steps.display_name.outputs.display_name_lower }}-${{ steps.build.outputs.buildVersion }}.zip" >> $GITHUB_OUTPUT

    # Standalone
    - name: Rename build folder
      if: ${{ startsWith(inputs.targetPlatform, 'Standalone') }}
      id: renaming
      shell: bash
      run: |
        mkdir renamed
        cp -r "build/${{ inputs.targetPlatform }}" renamed
        mv "renamed/${{ inputs.targetPlatform }}" "renamed/${{ steps.project_name.outputs.projectName }}"
    - uses: vimtor/action-zip@v1
      if: ${{ startsWith(inputs.targetPlatform, 'Standalone') }}
      with:
        files: renamed
        dest: ${{ steps.zipName.outputs.zipName }}
    # WebGL
    - uses: vimtor/action-zip@v1
      if: ${{ inputs.targetPlatform == 'WebGL' }}
      with:
        files: build/${{ inputs.targetPlatform }}
        dest: ${{ steps.zipName.outputs.zipName }}
    # Android
    - name: Set Android output path
      if: ${{ inputs.targetPlatform == 'Android' }}
      id: android_path
      env:
        ext: ${{ fromJSON('[".apk", ".aab"]')[inputs.androidAppBundle == 'true'] }}
      shell: bash
      run: |
        oldfilename="build/Android/${{ steps.project_name.outputs.projectName }}${{ env.ext }}"
        newfilename="build/Android/${{ steps.project_name.outputs.projectName }} ${{ steps.build.outputs.buildVersion }}${{ env.ext }}"
        sudo mv "$oldfilename" "$newfilename"
        echo "path=$newfilename" >> $GITHUB_OUTPUT
    
    # Output
    - name: Set the action's output
      id: output_path
      shell: bash
      run: |
        if [ ${{ inputs.targetPlatform == 'Android' }} == 'true' ]; then
          echo 'path=${{ steps.android_path.outputs.path }}' >> $GITHUB_OUTPUT
        elif [ ${{ inputs.targetPlatform == 'WebGL' }} == 'true' ]; then
          echo 'path=${{ steps.zipName.outputs.zipName }}' >> $GITHUB_OUTPUT
        elif [ ${{ startsWith(inputs.targetPlatform, 'Standalone') == 'true' }} ]; then
          echo 'path=${{ steps.zipName.outputs.zipName }}' >> $GITHUB_OUTPUT
        else
          echo 'path=ERROR' >> $GITHUB_OUTPUT
        fi
        
