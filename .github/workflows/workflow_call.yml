name: Build and Deploy


on:
  workflow_call:
    inputs:
      json_input:
        type: string
        required: true
    secrets:
      # Build secrets
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      # Build for Android
      ANDROID_KEYSTORE_NAME:
        required: false
      ANDROID_KEYSTORE_BASE64:
        required: false
      ANDROID_KEYSTORE_PASS:
        required: false
      ANDROID_KEYALIAS_NAME:
        required: false
      ANDROID_KEYALIAS_PASS:
        required: false
      # Discord
      DISCORD_WEBHOOK_ID:
        required: false
      DISCORD_WEBHOOK_TOKEN:
        required: false
      # Itch.io
      ITCH_BUTLER_CREDENTIALS:
        required: false
      ITCH_GAME:
        required: false
      ITCH_USER:
        required: false
      # Telegram
      TELEGRAM_SESSION:
        required: false
      TELEGRAM_API_ID:
        required: false
      TELEGRAM_API_HASH:
        required: false
      TELEGRAM_TOKEN:
        required: false
      TELEGRAM_CHAT_ID:
        required: false
      # Play Store
      PLAY_STORE_SERVICE_ACCOUNT_JSON:
        required: false
      PLAY_STORE_PACKAGE_NAME:
        required: false
    

jobs:
  build:
    name: Build for ${{ fromJson(inputs.json_input).buildPlatform }}
    runs-on: ${{ fromJSON('["ubuntu-latest", "macos-latest"]')[fromJson(inputs.json_input).buildPlatform == 'iOS'] }}
    outputs:
      artifact: ${{ steps.uuid.outputs.uuid }}
      build_path: ${{ steps.build.outputs.buildPath }}
      start_time: ${{ steps.time.outputs.start }}
      project_name: ${{ steps.project_name.outputs.projectNameNoSpaces }}
      version: ${{ steps.build.outputs.version }}
    steps:
      # --- Store start time
      - name: Store start time
        id: time
        run: |
          echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      # --- Free disk space if requested
      - name: Free CI system disk space
        if: ${{ fromJson(inputs.json_input).freeDiskSpace == true }}
        uses: kfir4444/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: false

      # --- Build ---
      - name: Build
        id: build
        uses: mnicolas94/facticus-deploy/.github/actions/build@feat/ios_support
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_NAME: ${{ secrets.ANDROID_KEYSTORE_NAME }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          ANDROID_KEYALIAS_NAME: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          ANDROID_KEYALIAS_PASS: ${{ secrets.ANDROID_KEYALIAS_PASS }}
        with:
          targetPlatform: ${{ fromJson(inputs.json_input).buildPlatform }}
          developmentBuild: ${{ fromJson(inputs.json_input).developmentBuild }}
          versioningStrategy: ${{ fromJson(inputs.json_input).versioningStrategy }}
          buildVariables: ${{ fromJson(inputs.json_input).buildVariables }}
          buildParameters: ${{ toJson(fromJson(inputs.json_input).buildParams) }}
      
      # get project name in this job as it is the one checkouts the repository during the build step
      - name: Get project name variable
        if: success() || failure()
        id: project_name
        uses: mnicolas94/facticus-deploy/.github/actions/get-project-name@feat/ios_support
      
      - name: Generate unique id for artifact
        id: uuid
        run: |
          echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT
      
      - name: Upload build as artifact
        id: artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.uuid.outputs.uuid }}
          path: ${{ steps.build.outputs.buildPath }}
        
  # --- Deploy ---
  deploy:
    name: Deploy to ${{ matrix.deployPlatform }}
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.json_input).deployPlatforms }}
    steps:
      - name: Download artifact build
        id: download
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact }}
        
      - name: Get real file path
        id: path
        run: |
          filepath=$(basename "${{ needs.build.outputs.build_path }}")
          echo "path=$filepath" >> $GITHUB_OUTPUT
          
      - name: Deploy
        uses: mnicolas94/facticus-deploy/.github/actions/deploy@feat/ios_support
        env:
          TELEGRAM_SESSION: ${{ secrets.TELEGRAM_SESSION }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          ITCH_BUTLER_CREDENTIALS: ${{ secrets.ITCH_BUTLER_CREDENTIALS }}
          ITCH_GAME: ${{ secrets.ITCH_GAME }}
          ITCH_USER: ${{ secrets.ITCH_USER }}
          PLAY_STORE_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          PLAY_STORE_PACKAGE_NAME: ${{ secrets.PLAY_STORE_PACKAGE_NAME }}
        with:
          deployPlatform: ${{ matrix.deployPlatform }}
          buildPath: ${{ steps.path.outputs.path }}
          version: ${{ needs.build.outputs.version }}
          deployParameters: ${{ toJson(matrix.deployParams) }}

      # --- Notify ---
      - name: Get platform display name
        if: success() || failure()
        id: display_name
        uses: mnicolas94/facticus-deploy/.github/actions/platform-display-name@feat/ios_support
        with:
          platform: ${{ fromJson(inputs.json_input).buildPlatform }}
          
      - name: Get total elapsed time
        if: success() || failure()
        id: elapsed
        run: |
          start=${{ needs.build.outputs.start_time }}
          end=$(date +%s)
          elapsed=$((end - start))
          hours=$((elapsed / 3600))
          minutes=$((elapsed % 3600 / 60))
          seconds=$((elapsed % 60))
          formatted_hours=$(printf "%02d" $hours)
          formatted_minutes=$(printf "%02d" $minutes)
          formatted_seconds=$(printf "%02d" $seconds)
          echo "hours=$formatted_hours" >> $GITHUB_OUTPUT
          echo "minutes=$formatted_minutes" >> $GITHUB_OUTPUT
          echo "seconds=$formatted_seconds" >> $GITHUB_OUTPUT
          
      - name: Construct message info
        if: success() || failure()
        id: messageInfo
        run: |
          name="${{ needs.build.outputs.project_name }}"
          messageInfo="#$name (${{ needs.build.outputs.version }}): #${{ steps.display_name.outputs.display_name }} >> #${{ matrix.deployPlatform }}. Total time: ${{ steps.elapsed.outputs.hours}}:${{ steps.elapsed.outputs.minutes}}:${{ steps.elapsed.outputs.seconds}}"
          echo "info=$messageInfo" >> $GITHUB_OUTPUT

      # Success message
      - name: Send success message if not failed
        if: ${{ success() && needs.build.result == 'success' }}
        uses: mnicolas94/facticus-deploy/.github/actions/notify@feat/ios_support
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
        with:
          notifyPlatform: ${{ matrix.notifyPlatform }}
          message: "✅ Success ${{ steps.messageInfo.outputs.info }}"

      # Error message
      - name: Send error message if failed
        if: ${{ failure() || needs.build.result == 'failure' }}
        uses: mnicolas94/facticus-deploy/.github/actions/notify@feat/ios_support
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
        with:
          notifyPlatform: ${{ matrix.notifyPlatform }}
          message: "⚠️ Error ${{ steps.messageInfo.outputs.info }}"
          
  # --- Clean artifact ---
  clean_artifact:
    name: Clean artifact
    needs: [ build, deploy ]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ needs.build.outputs.artifact }}
          